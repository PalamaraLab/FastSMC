# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


strategy:
  matrix:
    # Ubuntu (unit tests)
    Ubuntu-unit:
      imageName: 'ubuntu-16.04'
      installDeps: 'apt'
      cmakeConfigArgs: ''
      cmakeBuildArgs: '--target ASMC_unit_tests'
      jobType: 'unit'
      language: 'C++'
    # Ubuntu (python module)
    Ubuntu-python:
      imageName: 'ubuntu-16.04'
      installDeps: 'apt'
      jobType: 'unit'
      language: 'Python'
    # Ubuntu (coverage)
    Ubuntu-coverage:
      imageName: 'ubuntu-16.04'
      installDeps: 'apt'
      cmakeConfigArgs: '-DASMC_ENABLE_COVERAGE:BOOL=TRUE'
      cmakeBuildArgs: ''
      jobType: 'coverage'
      language: 'C++'
    # Ubuntu (regression test, in Python, calling the CLI interface)
    Ubuntu-regression-python:
      imageName: 'ubuntu-16.04'
      installDeps: 'apt'
      cmakeConfigArgs: '-DASMC_REGRESSION_TESTING:BOOL=TRUE -DCMAKE_BUILD_TYPE=Release'
      cmakeBuildArgs: '--target Regression'
      jobType: 'regression-py'
      language: 'C++'
    # Ubuntu (regression test, in C++, using the library)
    Ubuntu-regression:
      imageName: 'ubuntu-16.04'
      installDeps: 'apt'
      cmakeConfigArgs: ''
      cmakeBuildArgs: '--target ASMC_regression'
      jobType: 'regression'
      language: 'C++'
    # macOS
    macOS-unit:
      imageName: 'macOS-10.13'
      installDeps: 'brew'
      cmakeConfigArgs: ''
      cmakeBuildArgs: '--target ASMC_unit_tests'
      jobType: 'unit'
      language: 'C++'
    # Windows
    #Windows-unit:
    #  imageName: 'windows-2019'
    #  installDeps: 'vcpkg'
    #  vcpkgTriplet: 'x64-windows'
    #  cmakeConfigArgs: '-DCMAKE_TOOLCHAIN_FILE=$(VCPKG_INSTALLATION_ROOT)/scripts/buildsystems/vcpkg.cmake'
    #  cmakeBuildArgs: '--target ASMC_unit_tests'
    #  jobType: 'unit'

trigger:
  - master

pool:
  vmImage: $(imageName)

variables:
  aptDeps: 'libboost-all-dev lcov libeigen3-dev'
  brewDeps: 'boost libomp eigen'
  vcpkgDeps: 'boost-algorithm boost-align boost-iostreams boost-program-options boost-math zlib eigen'

steps:

  - checkout: self
    submodules: true

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      python -m pip install --upgrade cmake
    displayName: Update cmake

  - script: |
      sudo apt update
      sudo apt install $(aptDeps)
    condition: eq(variables['installDeps'], 'apt')
    displayName: 'install dependencies (apt)'

  - script: |
      brew update
      brew install $(brewDeps)
    condition: eq(variables['installDeps'], 'brew')
    displayName: 'install dependencies (brew)'

  - script: |
      vcpkg --triplet $(vcpkgTriplet) install $(vcpkgDeps)
    condition: eq(variables['installDeps'], 'vcpkg')
    displayName: 'install dependencies (vcpkg)'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '.. $(cmakeConfigArgs)'
    condition: eq(variables['language'], 'C++')
    displayName: 'CMake'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '--build . $(cmakeBuildArgs)'
    condition: eq(variables['language'], 'C++')
    displayName: 'Build'

  - script: python -m pip install .
    displayName: 'Python build'
    condition: eq(variables['language'], 'Python')

  - script: python -m unittest discover ASMC_SRC/TESTS
    displayName: 'Python tests'
    condition: eq(variables['language'], 'Python')

  - script: ctest -R test1
    displayName: 'Unit tests'
    condition: and(in(variables['jobType'], 'unit', 'coverage'), eq(variables['language'], 'C++'))
    workingDirectory: 'build'

  - script: ctest -R regression
    displayName: 'Regression tests'
    condition: and(in(variables['jobType'], 'regression', 'coverage'), eq(variables['language'], 'C++'))
    workingDirectory: 'build'

  - script: |
      lcov --directory . --capture --output-file coverage.info
      lcov --remove coverage.info '/usr/*' '*/TESTS/*' --output-file coverage.info
      lcov --list coverage.info
      bash <(curl https://codecov.io/bash) -f coverage.info -t 3ad5d7a8-138a-4041-acdf-bbf26f2cc491
    displayName: 'Upload coverage'
    workingDirectory: 'build'
    condition: and(eq(variables['jobType'], 'coverage'), eq(variables['language'], 'C++'))
