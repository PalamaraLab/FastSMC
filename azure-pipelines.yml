# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


strategy:
  matrix:
    # Ubuntu
    Ubuntu:
      imageName: 'ubuntu-16.04'
      vcpkgTriplet: 'x64-linux'
    # macOS
    macOS:
      imageName: 'macOS-10.14'
      vcpkgTriplet: 'x64-osx'
      installVcpkg: 'true'
    # Windows
    Windows:
      imageName: 'windows-2019'
      vcpkgTriplet: 'x64-windows'

trigger:
  - master

pool:
  vmImage: $(imageName)

variables:
  boostRequired: 'boost-algorithm boost-align boost-iostreams boost-program-options boost-math zlib'

steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      python -m pip install --upgrade cmake
    displayName: Update cmake

  - script: |
      git clone https://github.com/Microsoft/vcpkg.git
      cd vcpkg
      ./bootstrap-vcpkg.sh
      ./vcpkg integrate install
      export VCPKG_INSTALLATION_ROOT=`pwd`
      export PATH="$VCPKG_INSTALLATION_ROOT:$PATH"
    workingDirectory: 'vcpkg_root'
    condition: eq(variables['installVcpkg'], 'true')
    displayName: 'install vcpkg'

  - script: |
      vcpkg --triplet $(vcpkgTriplet) install $(boostRequired)
    displayName: 'vcpkg install'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '.. -DCMAKE_TOOLCHAIN_FILE=$(VCPKG_INSTALLATION_ROOT)/scripts/buildsystems/vcpkg.cmake'
    displayName: 'CMake'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '--build .'
    displayName: 'Build'

  - script: ctest -V
    displayName: 'Test'
    workingDirectory: 'build'




